@page "/client-measurements"
@using MudBlazor
@using MudBlazor.Components
@using SeamRipperData
@inject SeamRipperData.Services.ClientServices ClientService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS
@using System.Text
@inject HttpClient Http
@using SeamRipperData.Dtos



<MudContainer MaxWidth="MaxWidth.False" Style="width: 100%;">
    <MudCard Elevation="4" Style="width: 100%;">
        <!-- Card Header with Search & Add Measurement Button -->
        <MudCardHeader>
            <MudText Typo="Typo.h6">Client Measurements</MudText>
            <MudSpacer />
            <MudTextField T="string"
                          Value="_quickFilter"
                          ValueChanged="OnSearchTextChanged"
                          Placeholder="Search Measurements..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          IconSize="Size.Medium" Class="mt-0" />

            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleForm">
                @(showForm ? "Cancel" : "Add Client")
            </MudButton>
        </MudCardHeader>

        <!-- DataGrid Section -->
        <MudCardContent>
            
                <MudDataGrid T="ClientMeasurements" MultiSelection="true" Items="@measurements"
                             SortMode="SortMode.Multiple" Filterable="true" 
                             Hideable="true" SelectedItemsChanged="SelectedItemsChanged" Dense="true" Hover="true"
                             Style="min-width: 1200px; width: 100%; table-layout: fixed;">
                    <Columns>
                        <SelectColumn T="ClientMeasurements" />
                        <PropertyColumn Property="x => x.Client.Name" Title="Name" Width="150px" />
                        <PropertyColumn Property="x => x.A_ChestMeasurement" Title="Chest" Width="100px" />
                        <PropertyColumn Property="x => x.B_SeatMeasurement" Title="Seat" Width="100px" />
                        <PropertyColumn Property="x => x.C_WaistMeasurement" Title="Waist" Width="100px" />
                        <PropertyColumn Property="x => x.D_TrouserMeasurement" Title="Trouser" Width="100px" />
                        <PropertyColumn Property="x => x.E_F_HalfBackMeasurement" Title="Half Back" Width="100px" />
                        <PropertyColumn Property="x => x.G_H_BackNeckToWaistMeasurement" Title="Back→Waist" Width="120px" />
                        <PropertyColumn Property="x => x.G_I_SyceDepthMeasurement" Title="Syce Depth" Width="120px" />
                        <PropertyColumn Property="x => x.I_L_SleeveLengthOnePieceMeasurement" Title="Sleeve 1pc" Width="120px" />
                        <PropertyColumn Property="x => x.E_I_SleeveLengthTwoPieceMeasurement" Title="Sleeve 2pc" Width="120px" />
                        <PropertyColumn Property="x => x.N_InsideLegMeasurement" Title="Leg" Width="100px" />
                        <PropertyColumn Property="x => x.P_Q_BodyRiseMeasurement" Title="Rise" Width="100px" />
                        <PropertyColumn Property="x => x.R_CloseWristMeasurement" Title="Wrist" Width="100px" />

                        <TemplateColumn Title="Actions" Width="120px">
                            <CellTemplate Context="context">
                            <div style="display: flex; gap: 0.5rem;">
                                <MudButton Color="Color.Primary" OnClick="@(() => EditMeasurement(context.Item))">
                                    <MudIcon Icon="@Icons.Material.Filled.Edit" />
                                </MudButton>
                                <MudButton Color="Color.Error" OnClick="@(() => ClearMeasurement(context.Item.Id))">
                                    <MudIcon Icon="@Icons.Material.Filled.Delete" />
                                </MudButton>
                            </div>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager T="ClientMeasurements" />
                    </PagerContent>
                </MudDataGrid>
            
            <MudButton Color="Color.Dark" Variant="Variant.Filled" OnClick="@ClearSelectedMeasurements" Disabled="@(!selectedMeasurements.Any())">
                Delete Selected Measurements (@selectedMeasurements.Count)
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@DeleteSelectedClients" Disabled="@(!selectedMeasurements.Any())">
                Delete Selected Clients (@selectedMeasurements.Select(m => m.ClientId).Distinct().Count())
            </MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@GenerateRandomClients">
                Generate Random Clients
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="async () => await DownloadAllClientsCSV()">
                <MudIcon Icon="@Icons.Material.Filled.FileDownload" />
                Export All as CSV
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="DownloadSelectedClientsCSV" Disabled="@(!selectedClients.Any())">
                <MudIcon Icon="@Icons.Material.Filled.FileDownload" />
                Export Selected as CSV (@selectedClients.Count)
            </MudButton>


        </MudCardContent>

        <!-- Add/Edit Form Section -->
        <MudCollapse Expanded="showForm">
            <MudCardContent>
                <MudForm Model="editingMeasurement" IsValid="@isValid">
                    @if (editingClient.Id == 0)

                    {
                        <MudTextField Label="Name" @bind-Value="editingClient.Name" Required="true" />
                        <MudTextField Label="Phone Number" @bind-Value="editingClient.PhoneNumber" />
                        <MudTextField Label="Notes" @bind-Value="editingClient.Notes" />
                    }

                    else

                    {
                        <MudText Typo="Typo.subtitle1">Name: @editingClient.Name</MudText>
                        <MudText Typo="Typo.subtitle1">Phone: @editingClient.PhoneNumber</MudText>
                        <MudText Typo="Typo.subtitle1">Notes: @editingClient.Notes</MudText>
                    }



                    <MudText Typo="Typo.subtitle1">Measurements</MudText>
                    <MudTextField Label="Chest" @bind-Value="editingMeasurement.A_ChestMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Seat" @bind-Value="editingMeasurement.B_SeatMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Waist" @bind-Value="editingMeasurement.C_WaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Trouser" @bind-Value="editingMeasurement.D_TrouserMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Half Back" @bind-Value="editingMeasurement.E_F_HalfBackMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="BackNeck To Waist" @bind-Value="editingMeasurement.G_H_BackNeckToWaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Syce Depth" @bind-Value="editingMeasurement.G_I_SyceDepthMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Sleeve Length One Piece" @bind-Value="editingMeasurement.I_L_SleeveLengthOnePieceMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Sleeve Length Two Piece" @bind-Value="editingMeasurement.E_I_SleeveLengthTwoPieceMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Inside Leg" @bind-Value="editingMeasurement.N_InsideLegMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Body Rise" @bind-Value="editingMeasurement.P_Q_BodyRiseMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Close Wrist" @bind-Value="editingMeasurement.R_CloseWristMeasurement" InputType="InputType.Number" />

                    <MudAlert Severity="Severity.Error" Dense="true" Show="@(!isValid)">
                        Please fill in required fields.
                    </MudAlert>
                </MudForm>
            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="SaveClient" Disabled="!isValid">Save</MudButton>
                <MudButton Color="Color.Secondary" OnClick="ToggleForm">Cancel</MudButton>
            </MudCardActions>
        </MudCollapse>
    </MudCard>
</MudContainer>

@code {
    private List<ClientMeasurements>? measurements;
    private List<ClientInfo> clients = new();

    private HashSet<ClientMeasurements> selectedMeasurements = new();
    private HashSet<ClientInfo> selectedClients = new();
    
    private ClientInfo editingClient = new();
    private ClientMeasurements editingMeasurement = new();

    private bool showForm = false;
    private bool isValid = true;

    private string? _quickFilter;

    


    protected override async Task OnInitializedAsync()
    {
        try
        {
            measurements = await ClientService.GetClientMeasurementsAsync();
        }

        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching client measurements: {ex.Message}");
        }
    }

    private void ToggleForm()
    {
        showForm = !showForm;
    }

    private void EditMeasurement(ClientMeasurements measurement)
    {

        editingMeasurement = measurement;

        editingClient = measurement.Client ?? new();

        // Make sure the client has a Measurements list containing the current one

        if (editingClient.Measurements == null)

            editingClient.Measurements = new List<ClientMeasurements>();



        if (!editingClient.Measurements.Contains(editingMeasurement))

            editingClient.Measurements.Add(editingMeasurement);



        showForm = true;

    }







    private async Task ClearMeasurement(int measurementId)

    {

        Console.WriteLine($"🧪 Clearing Measurement ID: {measurementId}");

        bool confirmed = (await DialogService.ShowMessageBox(

            "Confirm Clear",

            "Are you sure you want to clear measurements?",

            yesText: "Yes",

            cancelText: "Cancel")) ?? false;



        if (!confirmed)

            return;



        // 🔄 Clear selection before update to avoid stale data

        selectedMeasurements.Clear();

        selectedClients.Clear();



        // 📡 Call API to clear measurement

        var response = await Http.PutAsync($"api/clients/measurements/clear/{measurementId}", null);



        if (!response.IsSuccessStatusCode)

        {

            var error = await response.Content.ReadAsStringAsync();

            await JS.InvokeVoidAsync("alert", $"❌ API Error: {error}");

            return;

        }



        // 🔄 Get the full updated list from the API again

        var updatedDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");

        var allClients = ClientService.MapDtosToClients(updatedDtos);



        // ✅ Rebuild measurement list and re-link clients

        measurements = allClients.SelectMany(c =>

        {

            foreach (var m in c.Measurements)

                m.Client = c;

            return c.Measurements;

        }).ToList();



        foreach (var m in measurements)

        {

            Console.WriteLine($"✔ Measurement ID: {m.Id} for Client ID: {m.ClientId}");

        }







        Snackbar.Add("✅ Measurement cleared successfully!", Severity.Success);

        StateHasChanged();

    }













    private async Task GenerateRandomClients()
    {
        await ClientService.GenerateRandomClientsAsync(5); // generates 5 random clients

        measurements = await ClientService.GetClientMeasurementsAsync();
        clients = await ClientService.GetClientsAsync();

    }
    
    private async Task DownloadAllClientsCSV()
    {
        var allClients = await ClientService.GetClientsAsync(); // Fetch all clients
        var csvContent = new StringBuilder();

        // CSV header - Add measurement fields

        csvContent.AppendLine(

            "Client Name,Phone,Date,Notes," +
            "Chest,Seat,Waist,Trouser,Half Back," +
            "BackNeck To Waist,Syce Depth,Sleeve 1pc,Sleeve 2pc," +
            "Inside Leg,Body Rise,Close Wrist"

            );

        foreach (var client in allClients)
        {
            var measurement = client.Measurements?.FirstOrDefault(); // Get the first measurement (if exists)

            csvContent.AppendLine(

                $"{client.Name},{client.PhoneNumber},{client.Date},{client.Notes}," +
                $"{(measurement?.A_ChestMeasurement.HasValue == true ? measurement.A_ChestMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.B_SeatMeasurement.HasValue == true ? measurement.B_SeatMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.C_WaistMeasurement.HasValue == true ? measurement.C_WaistMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.D_TrouserMeasurement.HasValue == true ? measurement.D_TrouserMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.E_F_HalfBackMeasurement.HasValue == true ? measurement.E_F_HalfBackMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.G_H_BackNeckToWaistMeasurement.HasValue == true ? measurement.G_H_BackNeckToWaistMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.G_I_SyceDepthMeasurement.HasValue == true ? measurement.G_I_SyceDepthMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.I_L_SleeveLengthOnePieceMeasurement.HasValue == true ? measurement.I_L_SleeveLengthOnePieceMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.E_I_SleeveLengthTwoPieceMeasurement.HasValue == true ? measurement.E_I_SleeveLengthTwoPieceMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.N_InsideLegMeasurement.HasValue == true ? measurement.N_InsideLegMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.P_Q_BodyRiseMeasurement.HasValue == true ? measurement.P_Q_BodyRiseMeasurement.Value.ToString() : "N/A")}," +
                $"{(measurement?.R_CloseWristMeasurement.HasValue == true ? measurement.R_CloseWristMeasurement.Value.ToString() : "N/A")}"

                );
        }
        await ExportCSVFile(csvContent.ToString(), "All_Clients_With_Measurements.csv");
        StateHasChanged(); // 🔹 Force UI refresh to remove any overlays
    }

    private async Task DownloadSelectedClientsCSV()
    {
        if (!selectedClients.Any()) return;

        var csvContent = new StringBuilder();

        // CSV header - Add measurement fields

        csvContent.AppendLine(

            "Client Name,Phone,Date,Notes," +
            "Chest,Seat,Waist,Trouser,Half Back," +
            "BackNeck To Waist,Syce Depth,Sleeve 1pc,Sleeve 2pc," +
            "Inside Leg,Body Rise,Close Wrist"
            );

        foreach (var client in selectedClients)
        {

            var measurement = client.Measurements?.FirstOrDefault(); // Get the first measurement (if exists)



            csvContent.AppendLine(

                    $"{client.Name},{client.PhoneNumber},{client.Date},{client.Notes}," +
                    $"{(measurement?.A_ChestMeasurement.HasValue == true ? measurement.A_ChestMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.B_SeatMeasurement.HasValue == true ? measurement.B_SeatMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.C_WaistMeasurement.HasValue == true ? measurement.C_WaistMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.D_TrouserMeasurement.HasValue == true ? measurement.D_TrouserMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.E_F_HalfBackMeasurement.HasValue == true ? measurement.E_F_HalfBackMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.G_H_BackNeckToWaistMeasurement.HasValue == true ? measurement.G_H_BackNeckToWaistMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.G_I_SyceDepthMeasurement.HasValue == true ? measurement.G_I_SyceDepthMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.I_L_SleeveLengthOnePieceMeasurement.HasValue == true ? measurement.I_L_SleeveLengthOnePieceMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.E_I_SleeveLengthTwoPieceMeasurement.HasValue == true ? measurement.E_I_SleeveLengthTwoPieceMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.N_InsideLegMeasurement.HasValue == true ? measurement.N_InsideLegMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.P_Q_BodyRiseMeasurement.HasValue == true ? measurement.P_Q_BodyRiseMeasurement.Value.ToString() : "N/A")}," +
                    $"{(measurement?.R_CloseWristMeasurement.HasValue == true ? measurement.R_CloseWristMeasurement.Value.ToString() : "N/A")}"

                    );
        }

        await ExportCSVFile(csvContent.ToString(), "Selected_Clients_With_Measurements.csv");
        StateHasChanged(); // 🔹 Force UI refresh to remove any overlays
    }

    private async Task ExportCSVFile(string csvData, string filename)
    {

        var bytes = Encoding.UTF8.GetBytes(csvData);

        await JS.InvokeVoidAsync("downloadFile", filename, "text/csv", Convert.ToBase64String(bytes));
    }

    private void SelectedItemsChanged(HashSet<ClientMeasurements> selectedItems)
    {
        selectedMeasurements = selectedItems;

        // Extract the clients from the selected measurements
        selectedClients = selectedItems
            .Where(m => m.Client != null)
            .Select(m => m.Client!)
            .Distinct()
            .ToHashSet();

        StateHasChanged();

    }



    private async Task OnSearchTextChanged(string value)

    {

        _quickFilter = value;



        if (string.IsNullOrWhiteSpace(_quickFilter))

        {

            // Get all clients

            var allDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");

            var allClients = ClientService.MapDtosToClients(allDtos);

            measurements = allClients.SelectMany(c =>

            {

                foreach (var m in c.Measurements)

                    m.Client = c;

                return c.Measurements;

            }).ToList();

        }

        else

        {

            // Search via API

            var searchResults = await Http.GetFromJsonAsync<List<ClientInfoDto>>($"api/clients/search?query={_quickFilter}");

            var matchedClients = ClientService.MapDtosToClients(searchResults);

            measurements = matchedClients.SelectMany(c =>

            {

                foreach (var m in c.Measurements)

                    m.Client = c;

                return c.Measurements;

            }).ToList();

        }



        StateHasChanged();

    }



    private async Task DeleteSelectedClients()
    {
        if (selectedMeasurements.Any())
        {
            var distinctClientIds = selectedMeasurements.Select(m => m.ClientId).Distinct();

            foreach (var clientId in distinctClientIds)
            {
                await ClientService.DeleteClientAsync(clientId);
            }

            measurements = await ClientService.GetClientMeasurementsAsync();
            selectedMeasurements.Clear();
            StateHasChanged();
        }
    }

    private async Task ClearSelectedMeasurements()
    {
        foreach (var measurement in selectedMeasurements)
        {

            var response = await Http.PutAsync($"api/clients/measurements/clear/{measurement.Id}", null);

            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "❌ Failed to clear measurement via API.");
                return;
            }
        }

        measurements = await ClientService.GetClientMeasurementsAsync();
        selectedMeasurements.Clear();
        StateHasChanged();

    }



    private async Task SaveClient()

    {

        if (!isValid)

            return;



        if (editingMeasurement.Id > 0)

        {

            // ✅ Update measurement via API

            var dto = new MeasurementsDto

                {

                    Id = editingMeasurement.Id,

                    ClientId = editingMeasurement.ClientId,

                    A_ChestMeasurement = editingMeasurement.A_ChestMeasurement,

                    B_SeatMeasurement = editingMeasurement.B_SeatMeasurement,

                    C_WaistMeasurement = editingMeasurement.C_WaistMeasurement,

                    D_TrouserMeasurement = editingMeasurement.D_TrouserMeasurement,

                    E_F_HalfBackMeasurement = editingMeasurement.E_F_HalfBackMeasurement,

                    G_H_BackNeckToWaistMeasurement = editingMeasurement.G_H_BackNeckToWaistMeasurement,

                    G_I_SyceDepthMeasurement = editingMeasurement.G_I_SyceDepthMeasurement,

                    I_L_SleeveLengthOnePieceMeasurement = editingMeasurement.I_L_SleeveLengthOnePieceMeasurement,

                    E_I_SleeveLengthTwoPieceMeasurement = editingMeasurement.E_I_SleeveLengthTwoPieceMeasurement,

                    N_InsideLegMeasurement = editingMeasurement.N_InsideLegMeasurement,

                    P_Q_BodyRiseMeasurement = editingMeasurement.P_Q_BodyRiseMeasurement,

                    R_CloseWristMeasurement = editingMeasurement.R_CloseWristMeasurement

                };



            var response = await Http.PutAsJsonAsync($"api/clients/measurements/{dto.Id}", dto);



            if (!response.IsSuccessStatusCode)

            {

                await JS.InvokeVoidAsync("alert", "❌ Failed to update measurement via API.");

                return;

            }



            await JS.InvokeVoidAsync("alert", "✅ Measurement updated via API!");

        }

        else

        {

            // ✅ Add new client + measurement via API

            editingClient.Measurements = new List<ClientMeasurements> { editingMeasurement };

            var newClientDto = ClientService.MapClientToDto(editingClient); // You can keep using the service just for mapping



            var response = await Http.PostAsJsonAsync("api/clients", newClientDto);



            if (!response.IsSuccessStatusCode)

            {

                await JS.InvokeVoidAsync("alert", "❌ Failed to save client via API.");

                return;

            }



            await JS.InvokeVoidAsync("alert", "✅ Client and measurement added via API!");

        }



        // ✅ Refresh the measurements

        var updatedDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");

        var allClients = ClientService.MapDtosToClients(updatedDtos);



        measurements = allClients.SelectMany(c =>

        {

            foreach (var m in c.Measurements)

                m.Client = c;



            return c.Measurements;

        }).ToList();



        editingClient = new();

        editingMeasurement = new();

        showForm = false;

        StateHasChanged();

    }


    
}

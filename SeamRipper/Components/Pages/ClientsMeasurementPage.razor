@page "/client-measurements"
@using MudBlazor
@using MudBlazor.Components
@using SeamRipperData
@inject SeamRipperData.Services.ClientServices ClientService
@inject ISnackbar Snackbar
@inject IDialogService DialogService


<MudContainer>
    <MudCard Elevation="4">
        <!-- Card Header with Search & Add Measurement Button -->
        <MudCardHeader>
            <MudText Typo="Typo.h6">Client Measurements</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_quickFilter" Placeholder="Search Measurements..."
                          Adornment="Adornment.Start" Immediate="true"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleForm">
                @(showForm ? "Cancel" : "Add Measurement")
            </MudButton>
        </MudCardHeader>

        <!-- DataGrid Section -->
        <MudCardContent>
            <MudDataGrid T="ClientMeasurements" MultiSelection="true" Items="@measurements"
                         SortMode="SortMode.Multiple" Filterable="true" QuickFilter="FilterMeasurements"
                         Hideable="true" SelectedItemsChanged="SelectedItemsChanged" Dense="true" Hover="true">
                <Columns>
                    <SelectColumn T="ClientMeasurements" />
                    <PropertyColumn Property="x => x.Client.Name" Title="Name" />
                    <PropertyColumn Property="x => x.A_ChestMeasurement" Title="Chest" />
                    <PropertyColumn Property="x => x.B_SeatMeasurement" Title="Seat" />
                    <PropertyColumn Property="x => x.C_WaistMeasurement" Title="Waist" />
                    <PropertyColumn Property="x => x.D_TrouserMeasurement" Title="Trouser" />
                    <PropertyColumn Property="x => x.E_F_HalfBackMeasurement" Title="Half Back" />

                    <!-- Actions Column (Edit & Delete) -->
                    <TemplateColumn Title="Actions">
                        <CellTemplate Context="context">
                            <MudButton Color="Color.Primary" OnClick="@(() => EditMeasurement(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" />
                            </MudButton>
                            <MudButton Color="Color.Error" OnClick="@(() => ClearMeasurement(context.Item.Id))">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                            </MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
                <PagerContent>
                    <MudDataGridPager T="ClientMeasurements" />
                </PagerContent>
            </MudDataGrid>
            <MudButton Color="Color.Dark" Variant="Variant.Filled" OnClick="@ClearSelectedMeasurements" Disabled="@(!selectedMeasurements.Any())">
                Delete Selected Measurements (@selectedMeasurements.Count)
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@DeleteSelectedClients" Disabled="@(!selectedMeasurements.Any())">
                Delete Selected Clients (@selectedMeasurements.Select(m => m.ClientId).Distinct().Count())
            </MudButton>


        </MudCardContent>

        <!-- Add/Edit Form Section (Inside the same card) -->
        <MudCollapse Expanded="showForm">
            <MudCardContent>
                <MudForm Model="editingMeasurement" IsValid="@isValid">
                    <MudTextField Label="Client ID" @bind-Value="editingMeasurement.ClientId" Required="true" />
                    <MudTextField Label="Chest" @bind-Value="editingMeasurement.A_ChestMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Seat" @bind-Value="editingMeasurement.B_SeatMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Waist" @bind-Value="editingMeasurement.C_WaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Trouser" @bind-Value="editingMeasurement.D_TrouserMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Half Back" @bind-Value="editingMeasurement.E_F_HalfBackMeasurement" InputType="InputType.Number" />

                    <MudAlert Severity="Severity.Error" Dense="true" Show="@(!isValid)">
                        Please fill in required fields.
                    </MudAlert>
                </MudForm>
            </MudCardContent>

            <MudCardActions>
                <MudButton Color="Color.Primary" OnClick="SaveMeasurement" Disabled="!isValid">Save</MudButton>
                <MudButton Color="Color.Secondary" OnClick="ToggleForm">Cancel</MudButton>
            </MudCardActions>
        </MudCollapse>
    </MudCard>
</MudContainer>

@code {
    private List<ClientMeasurements>? measurements;
    private ClientMeasurements editingMeasurement = new ClientMeasurements();
    private bool showForm = false;
    private bool isValid = true;
    private string? _quickFilter;
    private HashSet<ClientMeasurements> selectedMeasurements = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            measurements = await ClientService.GetClientMeasurementsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching client measurements: {ex.Message}");
        }
    }

    private void ToggleForm()
    {
        showForm = !showForm;
    }

    private void EditMeasurement(ClientMeasurements measurement)
    {
        editingMeasurement = measurement;
        showForm = true;
    }



    private async Task ClearMeasurement(int measurementId)
    {

        bool confirmed = (await DialogService.ShowMessageBox(

        "Confirm Clear",

        $"Are you sure you want to clear  measurements?",

        yesText: "Yes",

        cancelText: "Cancel")) ?? false;

        if (!confirmed)
            return;

        foreach (var measurement in selectedMeasurements)
        {
            await ClientService.ClearClientMeasurementAsync(measurement.Id);
        }

        await ClientService.ClearClientMeasurementAsync(measurementId);
        measurements = await ClientService.GetClientMeasurementsAsync();

        Snackbar.Add("Measurement cleared successfully!", Severity.Success);

        StateHasChanged();
    }

    private void SelectedItemsChanged(HashSet<ClientMeasurements> selectedItems)
    {
        selectedMeasurements = selectedItems;
        StateHasChanged();
    }
    private async Task DeleteSelectedClients()
    {
        if (selectedMeasurements.Any())
        {
            var distinctClientIds = selectedMeasurements
                                    .Select(m => m.ClientId)
                                    .Distinct();
            foreach (var clientId in distinctClientIds)
            {
                await ClientService.DeleteClientAsync(clientId);
            }
            // Refresh your measurements data
            measurements = await ClientService.GetClientMeasurementsAsync();
            selectedMeasurements.Clear();
            StateHasChanged();
        }
    }

    private async Task ClearSelectedMeasurements()
    {
        foreach (var measurement in selectedMeasurements)
        {
            await ClientService.ClearClientMeasurementAsync(measurement.Id);
        }

        measurements = await ClientService.GetClientMeasurementsAsync(); // reload measurements clearly
        selectedMeasurements.Clear(); // clear selections explicitly
        StateHasChanged(); // update UI immediately
    }

    private async Task SaveMeasurement()
    {
        if (editingMeasurement.Id == 0)
        {
            await ClientService.AddClientMeasurementAsync(editingMeasurement);
        }

        else
        {
            await ClientService.UpdateClientMeasurementAsync(editingMeasurement);
        }

        measurements = await ClientService.GetClientMeasurementsAsync();
        showForm = false;
    }

    private async Task DeleteMeasurement(int measurementId)
    {
        await ClientService.DeleteClientMeasurementAsync(measurementId);
        measurements = await ClientService.GetClientMeasurementsAsync();
    }

    private bool FilterMeasurements(ClientMeasurements measurement)

    {

        if (string.IsNullOrWhiteSpace(_quickFilter))

            return true;

        return measurement.Client?.Name?.Contains(_quickFilter, StringComparison.OrdinalIgnoreCase) == true
            || measurement.A_ChestMeasurement.ToString().Contains(_quickFilter);
    }

}

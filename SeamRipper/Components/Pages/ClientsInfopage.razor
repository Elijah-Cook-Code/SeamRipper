@page "/clients"
@using MudBlazor
@using SeamRipperData.Models
@inject SeamRipperData.Services.ClientServices ClientService
@inject IJSRuntime JS
@using System.Text
@inject HttpClient Http
@using SeamRipperData.Dtos;


<MudContainer>
    <MudCard Elevation="4">
        <!-- Card Header with Search & Add Client Button -->
        <MudCardHeader>
            <MudText Typo="Typo.h6">Client Information</MudText>
            <MudSpacer />
            <MudTextField T="string"
                          Value="_quickFilter"
                          ValueChanged="OnSearchTextChanged"
                          Placeholder="Search Clients..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Immediate="true"
                          IconSize="Size.Medium" Class="mt-0" />
     
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ToggleForm">
                @(showForm ? "Cancel" : "Add Client")
            </MudButton>
        </MudCardHeader>

        <!-- DataGrid Section -->
        <MudCardContent>
            <MudDataGrid T="ClientInfo" MultiSelection="true" Items="@clients"
                         SortMode="SortMode.Multiple" Filterable="true" 
                         Hideable="true" SelectedItemsChanged="SelectedItemsChanged" Dense="true" Hover="true">

                <Columns>
                    <SelectColumn T="ClientInfo" />
                    <PropertyColumn Property="x => x.Id" Title="ID" />
                    <PropertyColumn Property="x => x.Name" Title="Name" />
                    <PropertyColumn Property="x => x.Date" Title="Date" />
                    <PropertyColumn Property="x => x.PhoneNumber" Title="Phone" />
                    <PropertyColumn Property="x => x.Notes" Title="Notes" />

                    <!-- Actions Column (Edit & Delete) -->
                    <TemplateColumn Title="Actions">
                        <CellTemplate Context="context">
                            <div style="display: flex; gap: 0.5rem;">
                            <MudButton Color="Color.Primary" OnClick="@(() => EditClient(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Edit" />
                            </MudButton>
                            <MudButton Color="Color.Error" OnClick="@(() => DeleteClient(context.Item))">
                                <MudIcon Icon="@Icons.Material.Filled.Delete" />
                            </MudButton>
                            </div>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>

                <PagerContent>
                    <MudDataGridPager T="ClientInfo" />
                </PagerContent>

            </MudDataGrid>

            <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@DeleteSelectedClients" Disabled="@(!selectedClients.Any())">
                Delete Selected Clients (@selectedClients.Count)
            </MudButton>
            <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@GenerateRandomClients">
                Generate Random Clients
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="async () => await DownloadAllClientsCSV()">
                <MudIcon Icon="@Icons.Material.Filled.FileDownload" />
                Export All as CSV
            </MudButton>
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="DownloadSelectedClientsCSV" Disabled="@(!selectedClients.Any())">
                <MudIcon Icon="@Icons.Material.Filled.FileDownload" />
                Export Selected as CSV (@selectedClients.Count)
            </MudButton>

        </MudCardContent>

        <!-- Add/Edit Form Section (Inside the same card) -->
        <MudCollapse Expanded="showForm">
            <MudCardContent>
                <MudForm @ref="form" Model="editingClient">
                    <MudTextField Label="Name" @bind-Value="editingClient.Name" Required="true" />
                    <MudTextField Label="Phone Number" @bind-Value="editingClient.PhoneNumber" />
                    <MudTextField Label="Notes" @bind-Value="editingClient.Notes" />

                    <MudText Typo="Typo.subtitle1">Measurements</MudText>
                    <MudTextField Label="Chest" @bind-Value="editingMeasurements.A_ChestMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Seat" @bind-Value="editingMeasurements.B_SeatMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Waist" @bind-Value="editingMeasurements.C_WaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Trouser" @bind-Value="editingMeasurements.D_TrouserMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Half Back" @bind-Value="editingMeasurements.E_F_HalfBackMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="BackNeck To Waist" @bind-Value="editingMeasurements.G_H_BackNeckToWaistMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Syce Depth" @bind-Value="editingMeasurements.G_I_SyceDepthMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Sleeve Length One Piece" @bind-Value="editingMeasurements.I_L_SleeveLengthOnePieceMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Sleeve Length Two Piece" @bind-Value="editingMeasurements.E_I_SleeveLengthTwoPieceMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Inside Leg" @bind-Value="editingMeasurements.N_InsideLegMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Body Rise" @bind-Value="editingMeasurements.P_Q_BodyRiseMeasurement" InputType="InputType.Number" />
                    <MudTextField Label="Close Wrist" @bind-Value="editingMeasurements.R_CloseWristMeasurement" InputType="InputType.Number" />

                    <MudAlert Severity="Severity.Error" Dense="true" Show="@(!form.IsValid)">
                        Please fill in required fields.
                    </MudAlert>

                    <MudCardActions>
                        <MudButton Color="Color.Primary" Type="Button" OnClick="SaveClient">Save</MudButton>
                        <MudButton Color="Color.Secondary" OnClick="ToggleForm">Cancel</MudButton>
                    </MudCardActions>
                </MudForm>

            </MudCardContent>

            
            
        </MudCollapse>
    </MudCard>


</MudContainer>

@code {
    private MudForm form;
    private List<ClientInfo> clients = new();
    private string _quickFilter = "";
    private HashSet<ClientInfo> selectedClients = new();
    private ClientInfo editingClient = new();
    private ClientMeasurements editingMeasurements = new();
    private bool isValid => !string.IsNullOrWhiteSpace(editingClient.Name);
    private bool showForm = false;


    protected override async Task OnInitializedAsync()
    {
        clients = await ClientService.GetClientsAsync();
    }

    private void SelectedItemsChanged(HashSet<ClientInfo> selectedItems)
    {
        selectedClients = selectedItems;
        StateHasChanged();
    }



    private async Task GenerateRandomClients()

    {
        int count = 5;
        var response = await Http.PostAsync("api/clients/generate/5", null);

        if (response.IsSuccessStatusCode)
        {
            var newClientDtos = await response.Content.ReadFromJsonAsync<List<ClientInfoDto>>();
            clients = ClientService.MapDtosToClients(newClientDtos);

            await JS.InvokeVoidAsync("alert", $" {newClientDtos.Count} clients generated!");
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "❌ Failed to generate random clients.");
        }
        StateHasChanged();

    }

    private async Task DeleteSelectedClients()
    {
        var failed = new List<string>();

        foreach (var client in selectedClients)
        {
            var response = await Http.DeleteAsync($"api/clients/{client.Id}");

            if (!response.IsSuccessStatusCode)
            {
                failed.Add(client.Name);
            }
        }

        var clientDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");

        clients = ClientService.MapDtosToClients(clientDtos);
        selectedClients.Clear();

        if (failed.Any())
        {
            await JS.InvokeVoidAsync("alert", $"❌ Failed to delete: {string.Join(", ", failed)}");
        }

        else
        {
            await JS.InvokeVoidAsync("alert", "✅ All selected clients deleted successfully!");
        }
    }

    private void ToggleForm()
    {
        showForm = !showForm;
        if (!showForm) ResetForm();
    }

    private void ResetForm()
    {
        editingClient = new();
        editingMeasurements = new();
    }

    private void EditClient(ClientInfo client)
    {
        editingClient = client;
        editingMeasurements = client.Measurements.FirstOrDefault() ?? new();
        showForm = true;
    }

    private async Task SaveClient()
    {
        await JS.InvokeVoidAsync("alert", "⏺ SaveClient called");

        if (!isValid)
        {
            await JS.InvokeVoidAsync("alert", "⚠️ Form is not valid.");
            return;
        }

        if (editingClient.Id == 0)
        {
            // 🧵 Link the measurement from the form
            editingClient.Measurements = new List<ClientMeasurements> { editingMeasurements };

            var newClientDto = ClientService.MapClientToDto(editingClient);
            var response = await Http.PostAsJsonAsync("api/clients", newClientDto);

            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "❌ Failed to save client to API.");
                return;
            }

            else
            {
                await JS.InvokeVoidAsync("alert", "✅ Client saved successfully!");
            }
        }

        else
        {
            editingClient.Measurements = new List<ClientMeasurements> { editingMeasurements };

            var updatedDto = ClientService.MapClientToDto(editingClient);
            var response = await Http.PutAsJsonAsync($"api/clients/{updatedDto.Id}", updatedDto);

            if (!response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "❌ Failed to update client via API.");
                return;
            }

            else
            {
                await JS.InvokeVoidAsync("alert", "✅ Client updated successfully!");
            }
        }

        // 🔄 Refresh the local data
        var clientDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");

        clients = ClientService.MapDtosToClients(clientDtos);

        ToggleForm();

    }

    private async Task DeleteClient(ClientInfo client)
    {

        var response = await Http.DeleteAsync($"api/clients/{client.Id}");

        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", $"❌ Failed to delete client: {client.Name}");
            return;
        }
        
        var clientDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");
        clients = ClientService.MapDtosToClients(clientDtos);

        await JS.InvokeVoidAsync("alert", $"✅ Deleted client: {client.Name}");

    }

    private async Task OnSearchTextChanged(string value)
    {
        _quickFilter = value;

        if (string.IsNullOrWhiteSpace(_quickFilter))
        {
            var allDtos = await Http.GetFromJsonAsync<List<ClientInfoDto>>("api/clients");
            clients = ClientService.MapDtosToClients(allDtos);
        }
        else
        {
            var searchResults = await Http.GetFromJsonAsync<List<ClientInfoDto>>($"api/clients/search?query={_quickFilter}");
            clients = ClientService.MapDtosToClients(searchResults);
        }

        StateHasChanged();
    }



    private async Task DownloadAllClientsCSV()
    {
        var response = await Http.GetAsync("api/clients");

        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "❌ Failed to fetch clients from API.");
            return;
        }

        var clientDtos = await response.Content.ReadFromJsonAsync<List<ClientInfoDto>>();
        var allClients = ClientService.MapDtosToClients(clientDtos);

        var csvContent = new StringBuilder();

        // CSV Header
        csvContent.AppendLine(
            "Client Name,Phone,Date,Notes," +
            "Chest,Seat,Waist,Trouser,Half Back," +
            "BackNeck To Waist,Syce Depth,Sleeve 1pc,Sleeve 2pc," +
            "Inside Leg,Body Rise,Close Wrist"
        );

        foreach (var client in allClients)
        {
            var m = client.Measurements?.FirstOrDefault();

            csvContent.AppendLine(
                $"{client.Name},{client.PhoneNumber},{client.Date},{client.Notes}," +
                $"{(m?.A_ChestMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.B_SeatMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.C_WaistMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.D_TrouserMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.E_F_HalfBackMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.G_H_BackNeckToWaistMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.G_I_SyceDepthMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.I_L_SleeveLengthOnePieceMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.E_I_SleeveLengthTwoPieceMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.N_InsideLegMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.P_Q_BodyRiseMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.R_CloseWristMeasurement?.ToString() ?? "N/A")}"
            );
        }

        await ExportCSVFile(csvContent.ToString(), "All_Clients_With_Measurements.csv");
        StateHasChanged();
    }


    private async Task DownloadSelectedClientsCSV()
    {
        if (!selectedClients.Any()) return;

        var selectedIds = selectedClients.Select(c => c.Id).ToList();
        var response = await Http.PostAsJsonAsync("api/clients/batch", selectedIds);

        if (!response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("alert", "❌ Failed to fetch selected client data from API.");
            return;
        }

        var selectedDtos = await response.Content.ReadFromJsonAsync<List<ClientInfoDto>>();
        var selectedMapped = ClientService.MapDtosToClients(selectedDtos);

        var csvContent = new StringBuilder();

        csvContent.AppendLine(
            "Client Name,Phone,Date,Notes," +
            "Chest,Seat,Waist,Trouser,Half Back," +
            "BackNeck To Waist,Syce Depth,Sleeve 1pc,Sleeve 2pc," +
            "Inside Leg,Body Rise,Close Wrist"
        );

        foreach (var client in selectedMapped)
        {
            var m = client.Measurements?.FirstOrDefault();

            csvContent.AppendLine(
                $"{client.Name},{client.PhoneNumber},{client.Date},{client.Notes}," +
                $"{(m?.A_ChestMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.B_SeatMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.C_WaistMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.D_TrouserMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.E_F_HalfBackMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.G_H_BackNeckToWaistMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.G_I_SyceDepthMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.I_L_SleeveLengthOnePieceMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.E_I_SleeveLengthTwoPieceMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.N_InsideLegMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.P_Q_BodyRiseMeasurement?.ToString() ?? "N/A")}," +
                $"{(m?.R_CloseWristMeasurement?.ToString() ?? "N/A")}"
            );
        }

        await ExportCSVFile(csvContent.ToString(), "Selected_Clients_With_Measurements.csv");
        StateHasChanged();
    }


    // General function to trigger CSV file download
    private async Task ExportCSVFile(string csvData, string filename)
    {

        var bytes = Encoding.UTF8.GetBytes(csvData);

        await JS.InvokeVoidAsync("downloadFile", filename, "text/csv", Convert.ToBase64String(bytes));

    }

}
